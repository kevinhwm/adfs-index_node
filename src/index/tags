!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CIFile	meta.h	/^typedef struct CIFile {$/;"	s
CIFile	meta.h	/^}CIFile;$/;"	t	typeref:struct:CIFile
CIManager	manager.h	/^typedef struct CIManager {$/;"	s
CIManager	manager.h	/^}CIManager;$/;"	t	typeref:struct:CIManager
CINameSpace	manager.h	/^typedef struct CINameSpace {$/;"	s
CINameSpace	manager.h	/^}CINameSpace;$/;"	t	typeref:struct:CINameSpace
CINode	zone.h	/^typedef struct CINode {$/;"	s
CINode	zone.h	/^}CINode;$/;"	t	typeref:struct:CINode
CIPosition	meta.h	/^typedef struct CIPosition {$/;"	s
CIPosition	meta.h	/^}CIPosition ;$/;"	t	typeref:struct:CIPosition
CIZone	zone.h	/^typedef struct CIZone {$/;"	s
CIZone	zone.h	/^}CIZone;$/;"	t	typeref:struct:CIZone
FLAG_CONNECTION	zone.h	/^} FLAG_CONNECTION;$/;"	t	typeref:enum:__anon1
FLAG_ERASE	zone.h	/^    FLAG_ERASE,$/;"	e	enum:__anon1
FLAG_INIT	zone.h	/^    FLAG_INIT		= 0,$/;"	e	enum:__anon1
FLAG_STATUS	zone.h	/^    FLAG_STATUS,$/;"	e	enum:__anon1
FLAG_UPLOAD	zone.h	/^    FLAG_UPLOAD		= 1,$/;"	e	enum:__anon1
GIc_connect	connect.c	/^int GIc_connect(CINode *pn, const char *url, FLAG_CONNECTION flag)$/;"	f
GIc_upload	connect.c	/^int GIc_upload(CINode *pn, const char *url, const char *fname, void *fdata, size_t fdata_len)$/;"	f
GIf_init	meta.c	/^int GIf_init(CIFile *_this)$/;"	f
GIm_delete	manager.c	/^int GIm_delete(const char *name_space, const char *fname)$/;"	f
GIm_download	manager.c	/^char * GIm_download(const char *name_space, const char *fname, const char *history)$/;"	f
GIm_exist	manager.c	/^int GIm_exist(const char *name_space, const char *fname)$/;"	f
GIm_exit	manager.c	/^int GIm_exit()$/;"	f
GIm_init	manager.c	/^int GIm_init(const char *conf_file, const char *syn_dir, int role, long bnum, unsigned long mem_size, unsigned long max_file_size)$/;"	f
GIm_setnode	manager.c	/^int GIm_setnode(const char *node_name, const char *attr_rw)$/;"	f
GIm_status	manager.c	/^char * GIm_status()$/;"	f
GIm_upload	manager.c	/^int GIm_upload(const char *name_space, int overwrite, const char *fname, void *fdata, size_t fdata_len)$/;"	f
GIs_export	syn_primary.c	/^int GIs_export(const char *name_space, const char *key, const char *val)$/;"	f
GIs_primary	syn_primary.c	/^int GIs_primary()$/;"	f
GIs_secondary	syn_secondary.c	/^int GIs_secondary()$/;"	f
GIu_run	update.c	/^int GIu_run()$/;"	f
GIz_init	zone.c	/^int GIz_init(CIZone *_this, const char *name)$/;"	f
MNGR_CORE_LOG	manager.h	17;"	d
MNGR_DATA_DIR	manager.h	15;"	d
MNGR_INSTANCE_F	manager.h	18;"	d
MNGR_LOG_DIR	manager.h	16;"	d
MNGR_TEAM_L_F	manager.h	19;"	d
MNGR_TEAM_R_F	manager.h	20;"	d
UPLOAD_HANDLER_KEY	http_upload.c	15;"	d	file:
_DFS_DATA_INDEX	update.c	/^static char _DFS_DATA_INDEX[][16] = {"I0300", "I0301"};$/;"	v	file:
_DFS_NODE_CURL_NUM	zone.h	14;"	d
__LINE_H__	meta.h	7;"	d
__MANAGER_H__	manager.h	7;"	d
__ZONE_H__	zone.h	7;"	d
_dfs_exit	indexserver.c	/^void _dfs_exit()$/;"	f
_upload_file_object	http_upload.c	/^typedef struct _upload_file_object {$/;"	s	file:
add	meta.h	/^    int (*add)(struct CIFile *, const char *zone, const char *node);$/;"	m	struct:CIFile
another_running	manager.h	/^    int another_running;$/;"	m	struct:CIManager
c_connect	connect.c	/^static int c_connect(CURL *curl, const char *url)$/;"	f	file:
c_rebuild	connect.c	/^static void c_rebuild(CINode *pn, int pos)$/;"	f	file:
c_upload	connect.c	/^static int c_upload(CURL *curl, const char *url, const char *fname, void *fdata, size_t fdata_len)$/;"	f	file:
conn	zone.h	/^    } conn[ _DFS_NODE_CURL_NUM ];$/;"	m	struct:CINode	typeref:struct:CINode::__anon2
create	zone.h	/^    int (*create)(struct CIZone *, const char *, const char *, const char *);$/;"	m	struct:CIZone
create_uuid	meta.c	/^static void create_uuid(CIFile *_this)$/;"	f	file:
curl	zone.h	/^	CURL *curl;$/;"	m	struct:CINode::__anon2
delete_handler	http_delete.c	/^nxweb_handler delete_handler={$/;"	v
delete_on_request	http_delete.c	/^static nxweb_result delete_on_request($/;"	f	file:
download_handler	http_download.c	/^nxweb_handler download_handler={$/;"	v
download_on_request	http_download.c	/^static nxweb_result download_on_request($/;"	f	file:
exist_handler	http_exist.c	/^nxweb_handler exist_handler={$/;"	v
exist_on_request	http_exist.c	/^static nxweb_result exist_on_request($/;"	f	file:
exit_flag	manager.h	/^    int exit_flag;$/;"	m	struct:CIManager
f_add	meta.c	/^static int f_add(CIFile *_this, const char *zone, const char *node)$/;"	f	file:
f_get_string	meta.c	/^static char * f_get_string(CIFile *_this)$/;"	f	file:
f_inc	syn_primary.c	/^FILE *f_inc = NULL;$/;"	v
f_release	meta.c	/^static int f_release(CIFile *_this)$/;"	f	file:
ffilemem	http_upload.c	/^    FILE *			ffilemem;$/;"	m	struct:_upload_file_object	file:
file_complete	http_upload.c	/^    int				file_complete;$/;"	m	struct:_upload_file_object	file:
file_len	http_upload.c	/^    size_t			file_len;$/;"	m	struct:_upload_file_object	file:
file_ptr	http_upload.c	/^    void *			file_ptr;$/;"	m	struct:_upload_file_object	file:
file_ready_to_receive	http_upload.c	/^    int				file_ready_to_receive;$/;"	m	struct:_upload_file_object	file:
filename	http_upload.c	/^    char			filename[512];$/;"	m	struct:_upload_file_object	file:
filename_ready_to_receive	http_upload.c	/^    int				filename_ready_to_receive;$/;"	m	struct:_upload_file_object	file:
flag	zone.h	/^	FLAG_CONNECTION flag;$/;"	m	struct:CINode::__anon2
fpostmem	http_upload.c	/^    FILE *			fpostmem;$/;"	m	struct:_upload_file_object	file:
fun_write	connect.c	/^static size_t fun_write(char *ptr, size_t size, size_t nmemb, void *userdata) { return nmemb; }$/;"	f	file:
fwbuffer	http_upload.c	/^    nxd_fwbuffer		fwbuffer;$/;"	m	struct:_upload_file_object	file:
g_manager	manager.c	/^CIManager g_manager;$/;"	v
get_nodelist	zone.h	/^    CINode ** (*get_nodelist)(struct CIZone *_this, int *pnum);$/;"	m	struct:CIZone
get_string	meta.h	/^    char * (*get_string)(struct CIFile *);$/;"	m	struct:CIFile
group_name	indexserver.c	/^static const char* group_name=0;$/;"	v	file:
head	meta.h	/^    struct CIPosition *head;$/;"	m	struct:CIFile	typeref:struct:CIFile::CIPosition
head	zone.h	/^    struct CINode *head;$/;"	m	struct:CIZone	typeref:struct:CIZone::CINode
identify	update.c	/^static int identify(const char *version)$/;"	f	file:
index_db	manager.h	/^    KCDB *index_db;$/;"	m	struct:CINameSpace
instance_id	manager.h	/^    char instance_id[64];$/;"	m	struct:CIManager
ip_port	zone.h	/^    char ip_port[ _DFS_NODENAME_LEN ];$/;"	m	struct:CINode
kc_apow	manager.h	/^    unsigned long kc_apow;$/;"	m	struct:CIManager
kc_bnum	manager.h	/^    unsigned long kc_bnum;$/;"	m	struct:CIManager
kc_fbp	manager.h	/^    unsigned long kc_fbp;$/;"	m	struct:CIManager
kc_msiz	manager.h	/^    unsigned long kc_msiz;$/;"	m	struct:CIManager
lock	zone.h	/^    pthread_mutex_t *lock;$/;"	m	struct:CINode
m_choose	manager.c	/^static CINode * m_choose(const char *record)$/;"	f	file:
m_create_ns	manager.c	/^static int m_create_ns(const char *name)$/;"	f	file:
m_create_zone	manager.c	/^static CIZone * m_create_zone(const char *name)$/;"	f	file:
m_get_history	manager.c	/^static char * m_get_history(const char *line, int order)$/;"	f	file:
m_get_node	manager.c	/^static CINode * m_get_node(const char *node_name, size_t len)$/;"	f	file:
m_get_ns	manager.c	/^static CINameSpace * m_get_ns(const char *ns)$/;"	f	file:
m_init_log	manager.c	/^static int m_init_log(cJSON *json)$/;"	f	file:
m_init_ns	manager.c	/^static int m_init_ns(cJSON *json)$/;"	f	file:
m_init_syn	manager.c	/^static int m_init_syn()$/;"	f	file:
m_init_zone	manager.c	/^static int m_init_zone(cJSON *json)$/;"	f	file:
main	indexserver.c	/^int main(int argc, char** argv) $/;"	f
max_file_size	manager.h	/^    unsigned long max_file_size;$/;"	m	struct:CIManager
mutex	zone.h	/^	pthread_mutex_t *mutex;$/;"	m	struct:CINode::__anon2
name	manager.h	/^    char name[ _DFS_NAMESPACE_LEN ];$/;"	m	struct:CINameSpace
name	zone.h	/^    char name[ _DFS_NODENAME_LEN ];$/;"	m	struct:CINode
name	zone.h	/^    char name[_DFS_ZONENAME_LEN];$/;"	m	struct:CIZone
next	manager.h	/^    struct CINameSpace *next;$/;"	m	struct:CINameSpace	typeref:struct:CINameSpace::CINameSpace
next	meta.h	/^    struct CIFile *next;$/;"	m	struct:CIFile	typeref:struct:CIFile::CIFile
next	meta.h	/^    struct CIPosition *next;$/;"	m	struct:CIPosition	typeref:struct:CIPosition::CIPosition
next	zone.h	/^    struct CINode *next;$/;"	m	struct:CINode	typeref:struct:CINode::CINode
next	zone.h	/^    struct CIZone *next;$/;"	m	struct:CIZone	typeref:struct:CIZone::CIZone
ns_head	manager.h	/^    struct CINameSpace *ns_head;$/;"	m	struct:CIManager	typeref:struct:CIManager::CINameSpace
ns_tail	manager.h	/^    struct CINameSpace *ns_tail;$/;"	m	struct:CIManager	typeref:struct:CIManager::CINameSpace
num	meta.h	/^    int num;$/;"	m	struct:CIFile
num	zone.h	/^    int num;$/;"	m	struct:CIZone
on_post_body	http_upload.c	/^static int on_post_body( multipart_parser *mp_obj, const char *at, size_t length )$/;"	f	file:
on_post_finished	http_upload.c	/^int on_post_finished (multipart_parser * mp_obj)$/;"	f
on_post_header_field	http_upload.c	/^static int on_post_header_field(multipart_parser *mp_obj, const char *at, size_t length) { return 0; }$/;"	f	file:
on_post_header_value	http_upload.c	/^static int on_post_header_value(multipart_parser *mp_obj, const char *at, size_t length)$/;"	f	file:
parser	http_upload.c	/^    multipart_parser *		parser;$/;"	m	struct:_upload_file_object	file:
parser_settings	http_upload.c	/^    multipart_parser_settings	parser_settings;$/;"	m	struct:_upload_file_object	file:
pm	http_upload.c	/^CIManager *pm = &g_manager;$/;"	v
port	indexserver.c	/^static int port=8341;$/;"	v	file:
post_boundary	http_upload.c	/^    char			post_boundary[1024];$/;"	m	struct:_upload_file_object	file:
postdata_len	http_upload.c	/^    size_t			postdata_len;$/;"	m	struct:_upload_file_object	file:
postdata_ptr	http_upload.c	/^    void *			postdata_ptr;$/;"	m	struct:_upload_file_object	file:
prev	manager.h	/^    struct CINameSpace *prev;$/;"	m	struct:CINameSpace	typeref:struct:CINameSpace::CINameSpace
prev	meta.h	/^    struct CIFile *prev;$/;"	m	struct:CIFile	typeref:struct:CIFile::CIFile
prev	meta.h	/^    struct CIPosition *prev;$/;"	m	struct:CIPosition	typeref:struct:CIPosition::CIPosition
prev	zone.h	/^    struct CINode *prev;$/;"	m	struct:CINode	typeref:struct:CINode::CINode
prev	zone.h	/^    struct CIZone *prev;$/;"	m	struct:CIZone	typeref:struct:CIZone::CIZone
primary	manager.h	/^    int primary;$/;"	m	struct:CIManager
release	meta.h	/^    int (*release)(struct CIFile *);$/;"	m	struct:CIFile
release	zone.h	/^    void (*release)(struct CIZone *);$/;"	m	struct:CIZone
server_main	indexserver.c	/^static void server_main() $/;"	f	file:
setnode_handler	http_setnode.c	/^nxweb_handler setnode_handler={$/;"	v
setnode_on_request	http_setnode.c	/^static nxweb_result setnode_on_request($/;"	f	file:
show_help	indexserver.c	/^static void show_help(void) $/;"	f	file:
split	meta.h	/^    char split;$/;"	m	struct:CIFile
state	zone.h	/^    _DFS_NODE_STATE state;$/;"	m	struct:CINode
status_handler	http_status.c	/^nxweb_handler status_handler={$/;"	v
status_on_request	http_status.c	/^static nxweb_result status_on_request($/;"	f	file:
syn_dir	manager.h	/^    char syn_dir[_DFS_MAX_LEN];$/;"	m	struct:CIManager
tail	meta.h	/^    struct CIPosition *tail;$/;"	m	struct:CIFile	typeref:struct:CIFile::CIPosition
tail	zone.h	/^    struct CINode *tail;$/;"	m	struct:CIZone	typeref:struct:CIZone::CINode
team_id	manager.h	/^    char team_id[64];$/;"	m	struct:CIManager
th_syn	manager.h	/^    pthread_t th_syn;$/;"	m	struct:CIManager
update	update.c	/^static int update(int order)$/;"	f	file:
update_I0300	update.c	/^static int update_I0300()$/;"	f	file:
upload_file_handler	http_upload.c	/^nxweb_handler upload_file_handler={$/;"	v
upload_file_object	http_upload.c	/^}upload_file_object;$/;"	t	typeref:struct:_upload_file_object	file:
upload_handler_key	http_upload.c	/^static const char upload_handler_key; $/;"	v	file:
upload_on_post_data	http_upload.c	/^static nxweb_result upload_on_post_data($/;"	f	file:
upload_on_post_data_complete	http_upload.c	/^static nxweb_result upload_on_post_data_complete($/;"	f	file:
upload_on_request	http_upload.c	/^static nxweb_result upload_on_request($/;"	f	file:
upload_request_data_finalize	http_upload.c	/^static void upload_request_data_finalize($/;"	f	file:
user_name	indexserver.c	/^static const char* user_name=0;$/;"	v	file:
uuid	meta.h	/^    char uuid[_DFS_UUID_LEN +8];$/;"	m	struct:CIFile
z_create	zone.c	/^static int z_create(CIZone *_this, const char *name, const char *ip_port, const char *state)$/;"	f	file:
z_get_nodelist	zone.c	/^static CINode ** z_get_nodelist(CIZone *_this, int *pnum)$/;"	f	file:
z_head	manager.h	/^    struct CIZone *z_head;$/;"	m	struct:CIManager	typeref:struct:CIManager::CIZone
z_release	zone.c	/^static void z_release(CIZone *_this)$/;"	f	file:
z_tail	manager.h	/^    struct CIZone *z_tail;$/;"	m	struct:CIManager	typeref:struct:CIManager::CIZone
zone_node	meta.h	/^    char zone_node[_DFS_ZONENAME_LEN + _DFS_NODENAME_LEN + 2];$/;"	m	struct:CIPosition
