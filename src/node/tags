!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADFS_NODE_STATE	an.h	/^typedef enum ADFS_NODE_STATE$/;"	g
ADFS_NODE_STATE	an.h	/^}ADFS_NODE_STATE;$/;"	t	typeref:enum:ADFS_NODE_STATE
ANManager	an.h	/^}ANManager;$/;"	t	typeref:struct:_ANManager
ANNameSpace	an.h	/^typedef struct ANNameSpace$/;"	s
ANNameSpace	an.h	/^}ANNameSpace;$/;"	t	typeref:struct:ANNameSpace
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -std=c99 -Wall -Wl,-rpath=.\/$/;"	m
CR	multipart_parser.c	44;"	d	file:
DOWNLOAD_HANDLER_KEY	if_download.c	15;"	d	file:
EMIT_DATA_CB	multipart_parser.c	33;"	d	file:
LF	multipart_parser.c	43;"	d	file:
LIBS	Makefile	/^LIBS = -lnxweb -lkyotocabinet -lrt$/;"	m
MAX_FILE_NUM	an.h	9;"	d
NOTIFY_CB	multipart_parser.c	24;"	d	file:
NodeDB	an.h	/^typedef struct NodeDB$/;"	s
NodeDB	an.h	/^}NodeDB;$/;"	t	typeref:struct:NodeDB
OBJS	Makefile	/^OBJS = nodeserver.o multipart_parser.o an_manager.o an_namespace.o an_conf.o if_upload.o if_download.o $/;"	m
SHARE_DATA	if_download.c	/^typedef struct SHARE_DATA{$/;"	s	file:
SHARE_DATA	if_download.c	/^}SHARE_DATA;$/;"	t	typeref:struct:SHARE_DATA	file:
S_READ_ONLY	an.h	/^    S_READ_ONLY     = 0,$/;"	e	enum:ADFS_NODE_STATE
S_READ_WRITE	an.h	/^    S_READ_WRITE    = 1,$/;"	e	enum:ADFS_NODE_STATE
TARGET	Makefile	/^TARGET = nodeserver$/;"	m
UPLOAD_HANDLER_KEY	if_upload.c	10;"	d	file:
_ANManager	an.h	/^typedef struct _ANManager$/;"	s
_multipart_parser_h	multipart_parser.h	6;"	d
_upload_file_object	if_upload.c	/^typedef struct _upload_file_object$/;"	s	file:
boundary_length	multipart_parser.c	/^    size_t boundary_length;$/;"	m	struct:multipart_parser	file:
check_kch_name	an_manager.c	/^static ADFS_RESULT check_kch_name(char * name)$/;"	f	file:
count_kch	an_manager.c	/^static int count_kch(const char * dir)$/;"	f	file:
create	an.h	/^    ADFS_RESULT (*create)(struct ANNameSpace *, int, char *, int, ADFS_NODE_STATE);$/;"	m	struct:ANNameSpace
data	multipart_parser.c	/^    void * data;$/;"	m	struct:multipart_parser	file:
data_ptr	if_download.c	/^    void * data_ptr;$/;"	m	struct:SHARE_DATA	file:
db	an.h	/^    KCDB        *   db;$/;"	m	struct:NodeDB
db_create	an_namespace.c	/^static ADFS_RESULT db_create(KCDB * db, char * path, ADFS_NODE_STATE state)$/;"	f	file:
delete_handler	if_delete.c	/^nxweb_handler delete_handler={$/;"	v
delete_on_request	if_delete.c	/^static nxweb_result delete_on_request(nxweb_http_server_connection* conn, nxweb_http_request* req, nxweb_http_response* resp) $/;"	f	file:
download_handler	if_download.c	/^nxweb_handler download_handler={$/;"	v
download_handler_key	if_download.c	/^static const char download_handler_key;$/;"	v	file:
download_on_request	if_download.c	/^static nxweb_result download_on_request($/;"	f	file:
download_request_data_finalize	if_download.c	/^static void download_request_data_finalize($/;"	f	file:
ffilemem	if_upload.c	/^    FILE *					  ffilemem;$/;"	m	struct:_upload_file_object	file:
file_complete	if_upload.c	/^    int                       file_complete;$/;"	m	struct:_upload_file_object	file:
file_len	if_upload.c	/^    size_t                    file_len;$/;"	m	struct:_upload_file_object	file:
file_ptr	if_upload.c	/^    void *                    file_ptr;$/;"	m	struct:_upload_file_object	file:
file_ready_to_receive	if_upload.c	/^    int                       file_ready_to_receive;$/;"	m	struct:_upload_file_object	file:
filename	if_upload.c	/^    char                      filename[512];$/;"	m	struct:_upload_file_object	file:
filename_ready_to_receive	if_upload.c	/^    int                       filename_ready_to_receive;$/;"	m	struct:_upload_file_object	file:
fpostmem	if_upload.c	/^    FILE *                    fpostmem;$/;"	m	struct:_upload_file_object	file:
fwbuffer	if_upload.c	/^    nxd_fwbuffer              fwbuffer;$/;"	m	struct:_upload_file_object	file:
g_manager	an_manager.c	/^ANManager g_manager;$/;"	v
get	an.h	/^    struct NodeDB * (*get)(struct ANNameSpace *, int);$/;"	m	struct:ANNameSpace	typeref:struct:ANNameSpace::get
get_conf	an_conf.c	/^int get_conf(const char * pfile, const char * target, char *value, size_t len)$/;"	f
group_name	nodeserver.c	/^static const char* group_name=0;$/;"	v	file:
head	an.h	/^    struct ANNameSpace * head;$/;"	m	struct:_ANManager	typeref:struct:_ANManager::ANNameSpace
head	an.h	/^    struct NodeDB * head;$/;"	m	struct:ANNameSpace	typeref:struct:ANNameSpace::NodeDB
id	an.h	/^    int             id;$/;"	m	struct:NodeDB
index	multipart_parser.c	/^    size_t index;$/;"	m	struct:multipart_parser	file:
index_db	an.h	/^    KCDB * index_db;$/;"	m	struct:ANNameSpace
kc_apow	an.h	/^    unsigned long kc_apow;$/;"	m	struct:_ANManager
kc_bnum	an.h	/^    unsigned long kc_bnum;$/;"	m	struct:_ANManager
kc_db	if_upload.c	/^    KCDB *                    kc_db;$/;"	m	struct:_upload_file_object	file:
kc_fbp	an.h	/^    unsigned long kc_fbp;$/;"	m	struct:_ANManager
kc_msiz	an.h	/^    unsigned long kc_msiz;$/;"	m	struct:_ANManager
key	if_upload.c	/^    char                      key[1024];$/;"	m	struct:_upload_file_object	file:
lookbehind	multipart_parser.c	/^    char* lookbehind;$/;"	m	struct:multipart_parser	file:
main	nodeserver.c	/^int main(int argc, char** argv) $/;"	f
mgr_create	an_manager.c	/^ANNameSpace * mgr_create(const char *name_space) $/;"	f
mgr_exit	an_manager.c	/^void mgr_exit() $/;"	f
mgr_get_file	an_manager.c	/^void mgr_get_file(const char * fname, const char * name_space, void ** ppfile_data, size_t *pfile_size)$/;"	f
mgr_get_ns	an_manager.c	/^static ANNameSpace * mgr_get_ns(const char * name_space)$/;"	f	file:
mgr_init	an_manager.c	/^ADFS_RESULT mgr_init(const char *path, unsigned long mem_size) $/;"	f
mgr_save	an_manager.c	/^ADFS_RESULT mgr_save(const char * name_space, const char *fname, size_t fname_len, void * fp, size_t fp_len)$/;"	f
multipart_boundary	multipart_parser.c	/^    char multipart_boundary[1];$/;"	m	struct:multipart_parser	file:
multipart_data_cb	multipart_parser.h	/^    typedef int (*multipart_data_cb) (multipart_parser*, const char *at, size_t length);$/;"	t
multipart_log	multipart_parser.c	/^static void multipart_log(const char * format, ...)$/;"	f	file:
multipart_notify_cb	multipart_parser.h	/^    typedef int (*multipart_notify_cb) (multipart_parser*);$/;"	t
multipart_parser	multipart_parser.c	/^struct multipart_parser {$/;"	s	file:
multipart_parser	multipart_parser.h	/^    typedef struct multipart_parser multipart_parser;$/;"	t	typeref:struct:multipart_parser
multipart_parser_execute	multipart_parser.c	/^size_t multipart_parser_execute(multipart_parser* p, const char *buf, size_t len) {$/;"	f
multipart_parser_free	multipart_parser.c	/^void multipart_parser_free(multipart_parser* p) {$/;"	f
multipart_parser_get_data	multipart_parser.c	/^void *multipart_parser_get_data(multipart_parser *p) {$/;"	f
multipart_parser_init	multipart_parser.c	/^multipart_parser* multipart_parser_init$/;"	f
multipart_parser_set_data	multipart_parser.c	/^void multipart_parser_set_data(multipart_parser *p, void *data) {$/;"	f
multipart_parser_settings	multipart_parser.h	/^    struct multipart_parser_settings {$/;"	s
multipart_parser_settings	multipart_parser.h	/^    typedef struct multipart_parser_settings multipart_parser_settings;$/;"	t	typeref:struct:multipart_parser_settings
multipart_parser_state	multipart_parser.h	/^    typedef struct multipart_parser_state multipart_parser_state;$/;"	t	typeref:struct:multipart_parser_state
name	an.h	/^    char name[MAX_PATH_LENGTH];$/;"	m	struct:ANNameSpace
next	an.h	/^    struct ANNameSpace * next;$/;"	m	struct:ANNameSpace	typeref:struct:ANNameSpace::ANNameSpace
next	an.h	/^    struct NodeDB * next;$/;"	m	struct:NodeDB	typeref:struct:NodeDB::NodeDB
ns_create	an_namespace.c	/^static ADFS_RESULT ns_create(ANNameSpace * _this, int id, char *path, int path_len, ADFS_NODE_STATE state)$/;"	f	file:
ns_get	an_namespace.c	/^static NodeDB * ns_get(ANNameSpace * _this, int id)$/;"	f	file:
ns_init	an_namespace.c	/^ADFS_RESULT ns_init(ANNameSpace * _this, const char *name_space)$/;"	f
ns_release	an_namespace.c	/^static void ns_release(ANNameSpace * _this, int id)$/;"	f	file:
ns_release_all	an_namespace.c	/^static void ns_release_all(ANNameSpace * _this)$/;"	f	file:
ns_switch_state	an_namespace.c	/^static ADFS_RESULT ns_switch_state(ANNameSpace * _this, int id, ADFS_NODE_STATE des_state)$/;"	f	file:
number	an.h	/^    unsigned long   number;$/;"	m	struct:NodeDB
number	an.h	/^    unsigned long number;$/;"	m	struct:ANNameSpace
on_body_end	multipart_parser.h	/^        multipart_notify_cb on_body_end;$/;"	m	struct:multipart_parser_settings
on_header_field	multipart_parser.h	/^        multipart_data_cb on_header_field;$/;"	m	struct:multipart_parser_settings
on_header_value	multipart_parser.h	/^        multipart_data_cb on_header_value;$/;"	m	struct:multipart_parser_settings
on_headers_complete	multipart_parser.h	/^        multipart_notify_cb on_headers_complete;$/;"	m	struct:multipart_parser_settings
on_part_data	multipart_parser.h	/^        multipart_data_cb on_part_data;$/;"	m	struct:multipart_parser_settings
on_part_data_begin	multipart_parser.h	/^        multipart_notify_cb on_part_data_begin;$/;"	m	struct:multipart_parser_settings
on_part_data_end	multipart_parser.h	/^        multipart_notify_cb on_part_data_end;$/;"	m	struct:multipart_parser_settings
on_post_body	if_upload.c	/^static int on_post_body( multipart_parser *mp_obj, const char *at, size_t length )$/;"	f	file:
on_post_finished	if_upload.c	/^int on_post_finished (multipart_parser * mp_obj)$/;"	f
on_post_header_field	if_upload.c	/^static int on_post_header_field(multipart_parser *mp_obj, const char *at, size_t length )$/;"	f	file:
on_post_header_value	if_upload.c	/^static int on_post_header_value( multipart_parser *mp_obj, const char *at, size_t length )$/;"	f	file:
parse	an_conf.c	/^static int parse(char *line, char *key, char *value)$/;"	f	file:
parser	if_upload.c	/^    multipart_parser *        parser;$/;"	m	struct:_upload_file_object	file:
parser_settings	if_upload.c	/^    multipart_parser_settings parser_settings;$/;"	m	struct:_upload_file_object	file:
path	an.h	/^    char            path[1024];$/;"	m	struct:NodeDB
path	an.h	/^    char path[MAX_PATH_LENGTH];$/;"	m	struct:_ANManager
port	nodeserver.c	/^static int port=9527;$/;"	v	file:
post_boundary	if_upload.c	/^    char                      post_boundary[1024];$/;"	m	struct:_upload_file_object	file:
postdata_len	if_upload.c	/^    size_t  	              postdata_len;$/;"	m	struct:_upload_file_object	file:
postdata_ptr	if_upload.c	/^    void *                    postdata_ptr;$/;"	m	struct:_upload_file_object	file:
pre	an.h	/^    struct ANNameSpace * pre;$/;"	m	struct:ANNameSpace	typeref:struct:ANNameSpace::ANNameSpace
pre	an.h	/^    struct NodeDB * pre;$/;"	m	struct:NodeDB	typeref:struct:NodeDB::NodeDB
release	an.h	/^    void (*release)(struct ANNameSpace *, int);$/;"	m	struct:ANNameSpace
release_all	an.h	/^    void (*release_all)(struct ANNameSpace *);$/;"	m	struct:ANNameSpace
s_end	multipart_parser.c	/^    s_end$/;"	e	enum:state	file:
s_header_field	multipart_parser.c	/^    s_header_field,$/;"	e	enum:state	file:
s_header_field_start	multipart_parser.c	/^    s_header_field_start,$/;"	e	enum:state	file:
s_header_value	multipart_parser.c	/^    s_header_value,$/;"	e	enum:state	file:
s_header_value_almost_done	multipart_parser.c	/^    s_header_value_almost_done,$/;"	e	enum:state	file:
s_header_value_start	multipart_parser.c	/^    s_header_value_start,$/;"	e	enum:state	file:
s_headers_almost_done	multipart_parser.c	/^    s_headers_almost_done,$/;"	e	enum:state	file:
s_part_data	multipart_parser.c	/^    s_part_data,$/;"	e	enum:state	file:
s_part_data_almost_boundary	multipart_parser.c	/^    s_part_data_almost_boundary,$/;"	e	enum:state	file:
s_part_data_almost_end	multipart_parser.c	/^    s_part_data_almost_end,$/;"	e	enum:state	file:
s_part_data_boundary	multipart_parser.c	/^    s_part_data_boundary,$/;"	e	enum:state	file:
s_part_data_end	multipart_parser.c	/^    s_part_data_end,$/;"	e	enum:state	file:
s_part_data_final_hyphen	multipart_parser.c	/^    s_part_data_final_hyphen,$/;"	e	enum:state	file:
s_part_data_start	multipart_parser.c	/^    s_part_data_start,$/;"	e	enum:state	file:
s_start	multipart_parser.c	/^    s_start,$/;"	e	enum:state	file:
s_start_boundary	multipart_parser.c	/^    s_start_boundary,$/;"	e	enum:state	file:
s_uninitialized	multipart_parser.c	/^    s_uninitialized = 1,$/;"	e	enum:state	file:
server_main	nodeserver.c	/^static void server_main() $/;"	f	file:
settings	multipart_parser.c	/^    const multipart_parser_settings* settings;$/;"	m	struct:multipart_parser	file:
show_help	nodeserver.c	/^static void show_help(void) $/;"	f	file:
split_db	an_manager.c	/^static ADFS_RESULT split_db(ANNameSpace * pns)$/;"	f	file:
state	an.h	/^    ADFS_NODE_STATE state;$/;"	m	struct:NodeDB
state	multipart_parser.c	/^    unsigned char state;$/;"	m	struct:multipart_parser	file:
state	multipart_parser.c	/^enum state {$/;"	g	file:
status_handler	if_status.c	/^nxweb_handler status_handler={$/;"	v
status_on_request	if_status.c	/^static nxweb_result status_on_request(nxweb_http_server_connection* conn, nxweb_http_request* req, nxweb_http_response* resp) $/;"	f	file:
switch_state	an.h	/^    ADFS_RESULT (*switch_state)(struct ANNameSpace *, int, ADFS_NODE_STATE);$/;"	m	struct:ANNameSpace
tail	an.h	/^    struct ANNameSpace * tail;$/;"	m	struct:_ANManager	typeref:struct:_ANManager::ANNameSpace
tail	an.h	/^    struct NodeDB * tail;$/;"	m	struct:ANNameSpace	typeref:struct:ANNameSpace::NodeDB
trim_left	an_conf.c	/^static void trim_left(char * p)$/;"	f	file:
trim_right	an_conf.c	/^static void trim_right(char * p)$/;"	f	file:
upload_file_handler	if_upload.c	/^nxweb_handler upload_file_handler={$/;"	v
upload_file_object	if_upload.c	/^}upload_file_object;$/;"	t	typeref:struct:_upload_file_object	file:
upload_handler_key	if_upload.c	/^static const char upload_handler_key; $/;"	v	file:
upload_on_post_data	if_upload.c	/^static nxweb_result upload_on_post_data($/;"	f	file:
upload_on_post_data_complete	if_upload.c	/^static nxweb_result upload_on_post_data_complete($/;"	f	file:
upload_on_request	if_upload.c	/^static nxweb_result upload_on_request($/;"	f	file:
upload_request_data_finalize	if_upload.c	/^static void upload_request_data_finalize($/;"	f	file:
user_name	nodeserver.c	/^static const char* user_name=0;$/;"	v	file:
value	if_upload.c	/^    char                      value[1024];$/;"	m	struct:_upload_file_object	file:
